import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from './ui/dialog';
import { ScrollArea } from './ui/scroll-area';
import { ChefHat, Clock, Users, AlertCircle, CheckCircle, Star, Utensils } from 'lucide-react';
import { toast } from "sonner@2.0.3";
import { projectId, publicAnonKey } from '../utils/supabase/info';

interface FridgeIngredient {
  id: string;
  name: string;
  quantity: number;
  freshness: 'excellent' | 'good' | 'fair' | 'poor';
  storage: string[];
  addedAt: string;
  updatedAt: string;
  expiryDate: string | null;
}

interface Recipe {
  name: string;
  difficulty: string;
  cookingTime: string;
  servings: string;
  description: string;
  availableIngredients: string[];
  missingIngredients: string[];
  category: string;
}

interface DetailedRecipe {
  name: string;
  description: string;
  difficulty: string;
  cookingTime: string;
  prepTime: string;
  servings: string;
  calories: string;
  ingredients: Array<{
    name: string;
    amount: string;
    essential: boolean;
  }>;
  instructions: Array<{
    step: number;
    title: string;
    description: string;
    tip?: string;
  }>;
  tips: string[];
  nutrition: {
    protein: string;
    carbs: string;
    fat: string;
    fiber: string;
  };
  tags: string[];
}

interface RecipeRecommendationsProps {
  fridgeIngredients: FridgeIngredient[];
}

export function RecipeRecommendations({ fridgeIngredients }: RecipeRecommendationsProps) {
  const [recipes, setRecipes] = useState<Recipe[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedRecipe, setSelectedRecipe] = useState<DetailedRecipe | null>(null);
  const [isDetailLoading, setIsDetailLoading] = useState(false);
  const [showDetailDialog, setShowDetailDialog] = useState(false);
  const [userRequest, setUserRequest] = useState<string>('');
  const [recipeCache, setRecipeCache] = useState<Map<string, DetailedRecipe>>(new Map());
  const [isPreloading, setIsPreloading] = useState(false);

  // Î†àÏãúÌîº Ï∂îÏ≤ú API Ìò∏Ï∂ú
  const getRecipeRecommendations = async (ingredients: FridgeIngredient[], userRequest?: string) => {
    const response = await fetch(`https://${projectId}.supabase.co/functions/v1/make-server-1aa0d6ee/recipes/recommend`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${publicAnonKey}`
      },
      body: JSON.stringify({ ingredients, userRequest })
    });
    
    if (!response.ok) {
      throw new Error(`ÏÑúÎ≤Ñ Ïò§Î•ò: ${response.status} ${response.statusText}`);
    }
    
    const result = await response.json();
    if (!result.success) {
      throw new Error(result.error || 'Failed to get recipe recommendations');
    }
    
    // Í≤ΩÍ≥† Î©îÏãúÏßÄÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ Ï≤òÎ¶¨
    if (result.warning) {
      toast.warning('Î†àÏãúÌîº ÏÉùÏÑ± Ï£ºÏùò', {
        description: result.warning
      });
    }
    
    return result.data.recipes;
  };

  // ÏÉÅÏÑ∏ Î†àÏãúÌîº API Ìò∏Ï∂ú
  const getDetailedRecipe = async (recipeName: string) => {
    const response = await fetch(`https://${projectId}.supabase.co/functions/v1/make-server-1aa0d6ee/recipes/detail`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${publicAnonKey}`
      },
      body: JSON.stringify({ 
        recipeName,
        ingredients: fridgeIngredients 
      })
    });
    
    if (!response.ok) {
      throw new Error(`ÏÑúÎ≤Ñ Ïò§Î•ò: ${response.status} ${response.statusText}`);
    }
    
    const result = await response.json();
    if (!result.success) {
      throw new Error(result.error || 'Failed to get detailed recipe');
    }
    
    // Í≤ΩÍ≥† Î©îÏãúÏßÄÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ Ï≤òÎ¶¨
    if (result.warning) {
      toast.warning('Î†àÏãúÌîº ÏÉùÏÑ± Ï£ºÏùò', {
        description: result.warning
      });
    }
    
    return result.data.recipe;
  };

  // Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏÉÅÏÑ∏ Î†àÏãúÌîº ÎØ∏Î¶¨ Î°úÎìú
  const preloadRecipeDetails = async (recipeNames: string[]) => {
    if (recipeNames.length === 0) return;
    
    setIsPreloading(true);
    const newCache = new Map(recipeCache);
    
    // Î≥ëÎ†¨Î°ú ÏÉÅÏÑ∏ Î†àÏãúÌîº ÏöîÏ≤≠
    const preloadPromises = recipeNames.slice(0, 3).map(async (recipeName) => {
      // Ïù¥ÎØ∏ Ï∫êÏãúÏóê ÏûàÏúºÎ©¥ Í±¥ÎÑàÎõ∞Í∏∞
      if (newCache.has(recipeName)) {
        return { recipeName, recipe: newCache.get(recipeName), success: true };
      }
      
      try {
        const detailedRecipe = await getDetailedRecipe(recipeName);
        newCache.set(recipeName, detailedRecipe);
        return { recipeName, recipe: detailedRecipe, success: true };
      } catch (error) {
        console.error(`ÏÉÅÏÑ∏ Î†àÏãúÌîº ÎØ∏Î¶¨ Î°úÎìú Ïã§Ìå® (${recipeName}):`, error);
        return { recipeName, recipe: null, success: false };
      }
    });
    
    const results = await Promise.allSettled(preloadPromises);
    const successCount = results.filter(result => 
      result.status === 'fulfilled' && result.value.success
    ).length;
    
    setRecipeCache(newCache);
    setIsPreloading(false);
    
    if (successCount > 0) {
      console.log(`‚úÖ ${successCount}Í∞ú Î†àÏãúÌîº ÏÉÅÏÑ∏Ï†ïÎ≥¥Î•º ÎØ∏Î¶¨ Î°úÎìúÌñàÏäµÎãàÎã§`);
    }
  };

  // Î†àÏãúÌîº Ï∂îÏ≤ú Î°úÎìú
  const loadRecommendations = async (customRequest?: string) => {
    if (fridgeIngredients.length === 0) return;
    
    setIsLoading(true);
    // Ï∫êÏãú Ï¥àÍ∏∞Ìôî (ÏÉàÎ°úÏö¥ Ï∂îÏ≤úÏù¥ÎØÄÎ°ú)
    setRecipeCache(new Map());
    
    try {
      const requestText = customRequest !== undefined ? customRequest : (userRequest || '');
      const recommendedRecipes = await getRecipeRecommendations(fridgeIngredients, requestText);
      setRecipes(recommendedRecipes);
      
      // API ÏùëÎãµÏóê Í≤ΩÍ≥†Í∞Ä ÏûàÎäî Í≤ΩÏö∞ ÏïåÎ¶º
      if (recommendedRecipes.length === 0) {
        toast.warning('Ï∂îÏ≤ú Î†àÏãúÌîºÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§', {
          description: 'Îã§Î•∏ ÏãùÏû¨Î£åÎ•º Ï∂îÍ∞ÄÌïòÍ±∞ÎÇò ÏöîÏ≤≠ÏÇ¨Ìï≠ÏùÑ Î∞îÍøîÎ≥¥ÏÑ∏Ïöî'
        });
      } else {
        // ÏÑ±Í≥µ Î©îÏãúÏßÄ
        if (requestText && requestText.trim()) {
          toast.success(`"${requestText.trim()}" ÏöîÏ≤≠Ïóê ÎßûÎäî Î†àÏãúÌîºÎ•º Ï∞æÏïòÏäµÎãàÎã§!`);
        } else {
          toast.success(`${recommendedRecipes.length}Í∞ÄÏßÄ Î†àÏãúÌîºÎ•º Ï∂îÏ≤úÌñàÏäµÎãàÎã§!`);
        }
      }
      
      // Ï∂îÏ≤ú ÏôÑÎ£å ÌõÑ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÎØ∏Î¶¨ Î°úÎìú
      if (recommendedRecipes.length > 0) {
        const recipeNames = recommendedRecipes.slice(0, 3).map(r => r.name);
        setTimeout(() => preloadRecipeDetails(recipeNames), 100); // ÏïΩÍ∞ÑÏùò ÎîúÎ†àÏù¥ ÌõÑ ÏãúÏûë
      }
      
    } catch (error) {
      console.error('Î†àÏãúÌîº Ï∂îÏ≤ú Î°úÎìú Ï§ë Ïò§Î•ò:', error);
      
      // Îçî Íµ¨Ï≤¥Ï†ÅÏù∏ ÏóêÎü¨ Î©îÏãúÏßÄ Ï†úÍ≥µ
      let errorMessage = 'Î†àÏãúÌîº Ï∂îÏ≤úÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§';
      let errorDescription = error.message;
      
      if (error.message.includes('API ÌÇ§')) {
        errorMessage = 'OpenAI API ÏÑ§Ï†ï Ïò§Î•ò';
        errorDescription = 'API ÌÇ§Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî';
      } else if (error.message.includes('ÎÉâÏû•Í≥†Ïóê ÏãùÏû¨Î£åÍ∞Ä ÏóÜÏäµÎãàÎã§')) {
        errorMessage = 'ÏãùÏû¨Î£å Î∂ÄÏ°±';
        errorDescription = 'ÎÉâÏû•Í≥†Ïóê ÏãùÏû¨Î£åÎ•º Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî';
      } else if (error.message.includes('ÌååÏã±')) {
        errorMessage = 'AI ÏùëÎãµ Ï≤òÎ¶¨ Ïò§Î•ò';
        errorDescription = 'Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî';
      }
      
      toast.error(errorMessage, {
        description: errorDescription
      });
      
      // ÏóêÎü¨ Ïãú Îπà Î∞∞Ïó¥Î°ú ÏÑ§Ï†ï
      setRecipes([]);
    } finally {
      setIsLoading(false);
    }
  };

  // ÏÉÅÏÑ∏ Î†àÏãúÌîº Î≥¥Í∏∞
  const handleViewDetail = async (recipeName: string) => {
    setShowDetailDialog(true);
    
    // Ï∫êÏãúÏóêÏÑú Î®ºÏ†Ä ÌôïÏù∏
    const cachedRecipe = recipeCache.get(recipeName);
    if (cachedRecipe) {
      setSelectedRecipe(cachedRecipe);
      console.log(`üöÄ Ï∫êÏãúÎêú Î†àÏãúÌîº Ï¶âÏãú ÌëúÏãú: ${recipeName}`);
      return;
    }
    
    // Ï∫êÏãúÏóê ÏóÜÏúºÎ©¥ Î°úÎî©ÌïòÎ©¥ÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
    setIsDetailLoading(true);
    try {
      const detailedRecipe = await getDetailedRecipe(recipeName);
      setSelectedRecipe(detailedRecipe);
      
      // ÏÉàÎ°ú Í∞ÄÏ†∏Ïò® Î†àÏãúÌîºÎ•º Ï∫êÏãúÏóê Ï†ÄÏû•
      setRecipeCache(prev => new Map(prev).set(recipeName, detailedRecipe));
      
    } catch (error) {
      console.error('ÏÉÅÏÑ∏ Î†àÏãúÌîº Î°úÎìú Ï§ë Ïò§Î•ò:', error);
      toast.error('ÏÉÅÏÑ∏ Î†àÏãúÌîºÎ•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§', {
        description: error.message
      });
      setShowDetailDialog(false);
    } finally {
      setIsDetailLoading(false);
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Ïâ¨ÏõÄ': return 'bg-green-500';
      case 'Î≥¥ÌÜµ': return 'bg-yellow-500';
      case 'Ïñ¥Î†§ÏõÄ': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'ÌïúÏãù': return 'üçö';
      case 'ÏñëÏãù': return 'üçù';
      case 'Ï§ëÏãù': return 'ü•¢';
      case 'ÏùºÏãù': return 'üç£';
      case 'ÎîîÏ†ÄÌä∏': return 'üç∞';
      default: return 'üçΩÔ∏è';
    }
  };

  // ÎÉâÏû•Í≥† ÏãùÏû¨Î£åÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎäî Í∏∞Ï°¥ Î†àÏãúÌîº Ï¥àÍ∏∞ÌôîÎßå ÏàòÌñâ
  useEffect(() => {
    if (fridgeIngredients.length === 0) {
      setRecipes([]);
      setRecipeCache(new Map());
    }
  }, [fridgeIngredients.length]);

  // ÎÉâÏû•Í≥†Í∞Ä ÎπÑÏñ¥ÏûàÎäî Í≤ΩÏö∞
  if (fridgeIngredients.length === 0) {
    return (
      <div className="space-y-4">
        {/* Ìó§Îçî */}
        <div className="mb-4">
          <div className="flex items-center gap-3 mb-3">
            <div className="p-2 bg-orange-500 text-white rounded-lg">
              <ChefHat className="w-6 h-6" />
            </div>
            <div>
              <h3>Ï∂îÏ≤ú Î†àÏãúÌîº</h3>
              <p className="text-muted-foreground text-sm">
                ÎÉâÏû•Í≥† ÏãùÏû¨Î£åÎ°ú ÎßåÎì§ Ïàò ÏûàÎäî ÏöîÎ¶¨Îì§
              </p>
            </div>
          </div>
          
          {/* ÏöîÏ≤≠ÏÇ¨Ìï≠ ÏûÖÎ†• Î∞è Ï∂îÏ≤ú Î≤ÑÌäº (ÎπÑÌôúÏÑ±Ìôî) */}
          <div className="flex gap-2">
            <Input
              placeholder="ÎÉâÏû•Í≥†Ïóê ÏãùÏû¨Î£åÎ•º Ï∂îÍ∞ÄÌïú ÌõÑ ÏöîÏ≤≠ÏÇ¨Ìï≠ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
              className="flex-1"
              disabled
            />
            <Button
              variant="outline"
              disabled
            >
              Ï∂îÏ≤ú
            </Button>
          </div>
        </div>
        
        <Card>
          <CardContent className="p-6 text-center">
            <div className="text-muted-foreground">
              <ChefHat className="w-10 h-10 mx-auto mb-2 opacity-50" />
              <p className="text-sm">ÎÉâÏû•Í≥†Ïóê ÏãùÏû¨Î£åÎ•º Ï∂îÍ∞ÄÌïòÎ©¥</p>
              <p className="text-xs">ÎßûÏ∂§ Î†àÏãúÌîºÎ•º Ï∂îÏ≤úÌï¥ÎìúÎ†§Ïöî!</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* Ìó§Îçî */}
      <div className="mb-4">
        <div className="flex items-center gap-3 mb-3">
          <div className="p-2 bg-orange-500 text-white rounded-lg">
            <ChefHat className="w-6 h-6" />
          </div>
          <div>
            <h3>Ï∂îÏ≤ú Î†àÏãúÌîº</h3>
            <p className="text-muted-foreground text-sm">
              ÎÉâÏû•Í≥† ÏãùÏû¨Î£åÎ°ú ÎßåÎì§ Ïàò ÏûàÎäî ÏöîÎ¶¨Îì§
            </p>
          </div>
        </div>
        
        {/* ÏöîÏ≤≠ÏÇ¨Ìï≠ ÏûÖÎ†• Î∞è Ï∂îÏ≤ú Î≤ÑÌäº */}
        <div className="flex gap-2">
          <Input
            value={userRequest || ''}
            onChange={(e) => setUserRequest(e.target.value || '')}
            placeholder="ÏõêÌïòÎäî ÏöîÎ¶¨ÎÇò Ï°∞Í±¥ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: Îß§Ïö¥ ÏöîÎ¶¨, Í∞ÑÎã®Ìïú ÏöîÎ¶¨, Îã§Ïù¥Ïñ¥Ìä∏ ÏãùÎã®)"
            className="flex-1"
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                loadRecommendations();
              }
            }}
          />
          <Button
            onClick={() => loadRecommendations()}
            disabled={isLoading}
            variant="outline"
          >
            {isLoading ? 'Ï∂îÏ≤ú Ï§ë...' : 'Ï∂îÏ≤ú'}
          </Button>
        </div>
      </div>

      {/* Î°úÎî© ÏÉÅÌÉú */}
      {isLoading && (
        <Card>
          <CardContent className="p-6 text-center">
            <div className="animate-spin w-6 h-6 border-2 border-orange-500 border-t-transparent rounded-full mx-auto mb-3" />
            <p className="text-sm">ü§ñ AIÍ∞Ä ÎßûÏ∂§ Î†àÏãúÌîºÎ•º Ï∞æÍ≥† ÏûàÏñ¥Ïöî...</p>
            <p className="text-xs text-muted-foreground">Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî</p>
          </CardContent>
        </Card>
      )}

      {/* Î†àÏãúÌîº Î™©Î°ù - Ï¥àÍ∏∞ ÏÉÅÌÉúÏôÄ Ï∂îÏ≤ú Ïã§Ìå® ÏÉÅÌÉú Íµ¨Î∂Ñ */}
      {!isLoading && recipes.length === 0 && fridgeIngredients.length > 0 && (
        <Card 
          className="hover:shadow-md transition-all cursor-pointer hover:scale-105"
          onClick={() => loadRecommendations()}
        >
          <CardContent className="p-6 text-center">
            <div className="text-muted-foreground hover:text-foreground transition-colors">
              <ChefHat className="w-10 h-10 mx-auto mb-2 opacity-50 hover:opacity-80 transition-opacity" />
              <p className="text-sm font-medium">Î†àÏãúÌîº ÏûêÎèô Ï∂îÏ≤ú</p>
              <p className="text-xs">ÎÉâÏû•Í≥† ÏãùÏû¨Î£åÎ°ú ÎßûÏ∂§ Î†àÏãúÌîºÎ•º Ï∂îÏ≤úÌï¥ÎìúÎ¶¥Í≤åÏöî</p>
              <p className="text-xs text-primary mt-2">üëÜ ÌÅ¥Î¶≠Ìï¥ÏÑú ÏãúÏûëÌïòÍ∏∞</p>
            </div>
          </CardContent>
        </Card>
      )}

      {!isLoading && recipes.length > 0 && (
        <div className="space-y-4">
          {/* Î∞±Í∑∏ÎùºÏö¥Îìú Î°úÎî© ÏÉÅÌÉú ÌëúÏãú */}
          {isPreloading && (
            <div className="flex items-center gap-2 text-sm text-muted-foreground bg-orange-50 dark:bg-orange-900/20 p-2 rounded">
              <div className="animate-spin w-3 h-3 border border-orange-500 border-t-transparent rounded-full" />
              <span>ÏÉÅÏÑ∏ Î†àÏãúÌîºÎ•º ÎØ∏Î¶¨ Ï§ÄÎπÑÌïòÍ≥† ÏûàÏñ¥Ïöî...</span>
            </div>
          )}
          
          <div className="grid grid-cols-3 gap-4">
            {recipes.slice(0, 3).map((recipe, index) => {
              const isCached = recipeCache.has(recipe.name);
              return (
                <Card 
                  key={index} 
                  className="hover:shadow-md transition-all cursor-pointer hover:scale-105 relative"
                  onClick={() => handleViewDetail(recipe.name)}
                >
                  {/* Ï∫êÏãú ÏÉÅÌÉú ÌëúÏãú */}
                  {isCached && (
                    <div className="absolute top-2 right-2 w-2 h-2 bg-green-500 rounded-full" 
                         title="ÏÉÅÏÑ∏ Î†àÏãúÌîº Ï§ÄÎπÑ ÏôÑÎ£å" />
                  )}
                  
                  <CardHeader className="pb-3">
                    <div className="text-center">
                      <div className="text-2xl mb-2">{getCategoryIcon(recipe.category)}</div>
                      <CardTitle className="text-base leading-tight">
                        {recipe.name}
                      </CardTitle>
                      <p className="text-xs text-muted-foreground mt-1 line-clamp-2">
                        {recipe.description}
                      </p>
                    </div>
                  </CardHeader>
                  
                  <CardContent className="space-y-3">
                    {/* ÏöîÎ¶¨ Ï†ïÎ≥¥ */}
                    <div className="flex flex-wrap gap-1 justify-center">
                      <Badge className={`text-white text-xs ${getDifficultyColor(recipe.difficulty)}`}>
                        {recipe.difficulty}
                      </Badge>
                      <Badge variant="outline" className="flex items-center gap-1 text-xs">
                        <Clock className="w-3 h-3" />
                        {recipe.cookingTime}
                      </Badge>
                      <Badge variant="outline" className="flex items-center gap-1 text-xs">
                        <Users className="w-3 h-3" />
                        {recipe.servings}
                      </Badge>
                    </div>

                    {/* ÏãùÏû¨Î£å ÏÉÅÌÉú */}
                    <div className="space-y-1">
                      {recipe.availableIngredients.length > 0 && (
                        <div className="flex items-center gap-1">
                          <CheckCircle className="w-3 h-3 text-green-500 flex-shrink-0" />
                          <p className="text-xs text-green-600 truncate">
                            Î≥¥Ïú† Ïû¨Î£å: {recipe.availableIngredients.slice(0, 2).join(', ')}
                            {recipe.availableIngredients.length > 2 && '...'}
                          </p>
                        </div>
                      )}
                      
                      {recipe.missingIngredients.length > 0 && (
                        <div className="flex items-center gap-1">
                          <AlertCircle className="w-3 h-3 text-orange-500 flex-shrink-0" />
                          <p className="text-xs text-orange-600 truncate">
                            ÌïÑÏöî Ïû¨Î£å: {recipe.missingIngredients.slice(0, 2).join(', ')}
                            {recipe.missingIngredients.length > 2 && '...'}
                          </p>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </div>
      )}

      {/* ÏÉÅÏÑ∏ Î†àÏãúÌîº Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
      <Dialog open={showDetailDialog} onOpenChange={setShowDetailDialog}>
        <DialogContent className="max-w-4xl max-h-[80vh]">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <ChefHat className="w-5 h-5" />
              {selectedRecipe?.name || 'Î†àÏãúÌîº ÏÉÅÏÑ∏Ï†ïÎ≥¥'}
            </DialogTitle>
          </DialogHeader>
          
          <ScrollArea className="h-[60vh]">
            {isDetailLoading ? (
              <div className="p-8 text-center">
                <div className="animate-spin w-8 h-8 border-2 border-orange-500 border-t-transparent rounded-full mx-auto mb-4" />
                <p>ÏÉÅÏÑ∏ Î†àÏãúÌîºÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
                <p className="text-sm text-muted-foreground mt-2">
                  Îã§ÏùåÎ≤àÏóêÎäî Îçî Îπ®ÎùºÏßà Í±∞ÏòàÏöî! üöÄ
                </p>
              </div>
            ) : selectedRecipe ? (
              <div className="space-y-6 p-1">
                {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-muted/30 rounded-lg">
                  <div className="text-center">
                    <p className="text-sm text-muted-foreground">ÎÇúÏù¥ÎèÑ</p>
                    <p className="font-medium">{selectedRecipe.difficulty}</p>
                  </div>
                  <div className="text-center">
                    <p className="text-sm text-muted-foreground">Ï°∞Î¶¨ÏãúÍ∞Ñ</p>
                    <p className="font-medium">{selectedRecipe.cookingTime}</p>
                  </div>
                  <div className="text-center">
                    <p className="text-sm text-muted-foreground">Ïù∏Î∂Ñ</p>
                    <p className="font-medium">{selectedRecipe.servings}</p>
                  </div>
                  <div className="text-center">
                    <p className="text-sm text-muted-foreground">ÏπºÎ°úÎ¶¨</p>
                    <p className="font-medium">{selectedRecipe.calories}</p>
                  </div>
                </div>

                {/* ÏÑ§Î™Ö */}
                <div>
                  <h4 className="mb-2">ÏöîÎ¶¨ ÏÜåÍ∞ú</h4>
                  <p className="text-muted-foreground">{selectedRecipe.description}</p>
                </div>

                {/* Ïû¨Î£å */}
                <div>
                  <h4 className="mb-3">ÌïÑÏöîÌïú Ïû¨Î£å</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                    {selectedRecipe.ingredients.map((ingredient, index) => (
                      <div key={index} className="flex items-center justify-between p-2 bg-card border rounded">
                        <span>{ingredient.name}</span>
                        <span className="text-sm text-muted-foreground">{ingredient.amount}</span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Ï°∞Î¶¨Î≤ï */}
                <div>
                  <h4 className="mb-3">Ï°∞Î¶¨ Í≥ºÏ†ï</h4>
                  <div className="space-y-4">
                    {selectedRecipe.instructions.map((instruction, index) => (
                      <div key={index} className="flex gap-4">
                        <div className="flex-shrink-0 w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium">
                          {instruction.step}
                        </div>
                        <div className="flex-1">
                          <h5 className="font-medium mb-1">{instruction.title}</h5>
                          <p className="text-sm text-muted-foreground">{instruction.description}</p>
                          {instruction.tip && (
                            <p className="text-xs text-orange-600 mt-1 italic">üí° {instruction.tip}</p>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* ÌåÅ */}
                {selectedRecipe.tips.length > 0 && (
                  <div>
                    <h4 className="mb-3">Ï°∞Î¶¨ ÌåÅ</h4>
                    <ul className="space-y-2">
                      {selectedRecipe.tips.map((tip, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <span className="text-orange-500 mt-1">üí°</span>
                          <span className="text-sm">{tip}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* ÏòÅÏñë Ï†ïÎ≥¥ */}
                <div>
                  <h4 className="mb-3">ÏòÅÏñë Ï†ïÎ≥¥ (1Ïù∏Î∂Ñ Í∏∞Ï§Ä)</h4>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="text-center p-3 bg-muted/30 rounded">
                      <p className="text-sm text-muted-foreground">Îã®Î∞±Ïßà</p>
                      <p className="font-medium">{selectedRecipe.nutrition.protein}</p>
                    </div>
                    <div className="text-center p-3 bg-muted/30 rounded">
                      <p className="text-sm text-muted-foreground">ÌÉÑÏàòÌôîÎ¨º</p>
                      <p className="font-medium">{selectedRecipe.nutrition.carbs}</p>
                    </div>
                    <div className="text-center p-3 bg-muted/30 rounded">
                      <p className="text-sm text-muted-foreground">ÏßÄÎ∞©</p>
                      <p className="font-medium">{selectedRecipe.nutrition.fat}</p>
                    </div>
                    <div className="text-center p-3 bg-muted/30 rounded">
                      <p className="text-sm text-muted-foreground">ÏãùÏù¥ÏÑ¨Ïú†</p>
                      <p className="font-medium">{selectedRecipe.nutrition.fiber}</p>
                    </div>
                  </div>
                </div>

                {/* ÌÉúÍ∑∏ */}
                {selectedRecipe.tags.length > 0 && (
                  <div>
                    <h4 className="mb-3">ÌÉúÍ∑∏</h4>
                    <div className="flex flex-wrap gap-2">
                      {selectedRecipe.tags.map((tag, index) => (
                        <Badge key={index} variant="secondary">
                          #{tag}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ) : null}
          </ScrollArea>
        </DialogContent>
      </Dialog>
    </div>
  );
}